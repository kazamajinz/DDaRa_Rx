# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: macos-latest
    env: 
      XC_VERSION: ${{ '14.2' }}
      XC_WORKSPACE: ${{ 'DDaRa.xcworkspace' }}
      XC_SCHEME: ${{ 'DDaRa' }}
      KEYCHAIN: ${{ 'test.keychain' }}
      
      PROJECT_ROOT_PATH: ${{ 'DDaRa' }}
      
      ENCRYPTED_CERTS_FILE_PATH: ${{ '.github/secrets/certs.p12.gpg' }}
      DECRYPTED_CERTS_FILE_PATH: ${{ '.github/secrets/certs.p12' }}

      ENCRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/DDaRa.mobileprovision.gpg' }}
      DECRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/DDaRa.mobileprovision' }}
      
      CERTS_EXPORT_PWD: ${{ secrets.CERTS_EXPORT_PWD }}
      CERTS_ENCRYPTION_PWD: ${{ secrets.CERTS_ENCRYPTO_PWD }}
      PROFILES_ENCRYPTO_PWD: ${{ secrets.PROFILES_ENCRYPTO_PWD }}

      APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
      APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

      XC_ARCHIVE_PATH: ${{ 'DDaRa.xcarchive' }}
      XC_EXPORT_PATH: ${{ './artifacts' }}
      
    steps:
    - name: Select latest Xcode
      run: "sudo xcode-select -s /Applications/Xcode_$XC_VERSION.app"
      
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
        path: Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    - name: CocoaPod Install
      run: pod install
      
    - name: Build
      run: echo Hello, world!
      
    - name: Run tests
      run: | 
        xcodebuild clean test -workspace "$XC_WORKSPACE" -scheme "$XC_SCHEME" -destination 'platform=iOS Simulator,name=iPhone 13'
        
    - name: Configure Keychain 
      run: | 
        security create-keychain -p "" "$KEYCHAIN" 
        security list-keychains -s "$KEYCHAIN" 
        security default-keychain -s "$KEYCHAIN" 
        security unlock-keychain -p "" "$KEYCHAIN"

    - name : Configure Code Signing
      run: | 
        gpg -d -o "$DECRYPTED_CERTS_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERTS_ENCRYPTION_PWD" "$ENCRYPTED_CERTS_FILE_PATH"
        gpg -d -o "$DECRYPTED_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROFILES_ENCRYPTO_PWD" "$ENCRYPTED_PROVISION_FILE_PATH"
        security import "$DECRYPTED_CERTS_FILE_PATH" -k "$KEYCHAIN" -P "$CERTS_EXPORT_PWD" -A
        security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
        mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
        
        echo `ls .github/secrets/*.mobileprovision`
        for PROVISION in `ls .github/secrets/*.mobileprovision`
          do
            UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
            cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
            done

    - name: Archive
      run: |
        xcodebuild clean archive -workspace "$XC_WORKSPACE" -scheme "$XC_SCHEME" -configuration release -archivePath "$XC_ARCHIVE_PATH"
        
    - name: Export for App Store
      run: | 
        xcodebuild -exportArchive -archivePath "$XC_ARCHIVE_PATH" -exportOptionsPlist ExportOptions.plist -exportPath "$XC_EXPORT_PATH"
        
    - name: Install private API key p8
      run: |
        mkdir -p ~/private_keys
        echo -n "$APPSTORE_API_PRIVATE_KEY" | base64 --decode --output ~/private_keys/AuthKey_$APPSTORE_API_KEY_ID.p8
        
    - name: Upload app to TestFlight
      run: |
        cd DDaRa
        xcrun altool --output-format xml --upload-app -f "$XC_ARCHIVE_PATH" -t ios --apiKey $APPSTORE_API_KEY_ID --apiIssuer $APPSTORE_ISSUER_ID

#    오류가 발생할 수 있음.
#    - name: Upload app to TestFlight
#      uses: apple-actions/upload-testflight-build@v1
#      with:
#          app-path: '"$XC_EXPORT_PATH"/DDaRa.ipa'
#          issuer-id: "$APPSTORE_ISSUER_ID"
#          api-key-id: "$APPSTORE_API_KEY_ID"
#          api-private-key: "$APPSTORE_API_PRIVATE_KEY"

#    - name: Upload Artifact
#      uses: actions/upload-artifact@v3
#      with:
#        name: Artifacts
#        path: ./artifacts



